import java.util.*;
import java.util.stream.*;
import java.util.Optional;

class Employee {
    String name;
    int age;
    double salary;
    public Employee(String name, int age, double salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }
    public String toString() {
        return name + " - Age: " + age + ", Salary: " + salary;
    }
}

class Student {
    String name;
    double marks;
    public Student(String name, double marks) {
        this.name = name;
        this.marks = marks;
    }
}

class Product {
    String name;
    double price;
    String category;
    public Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }
    public String toString() {
        return name + " (" + category + ") - $" + price;
    }
}

public class Main {
    public static void main(String[] args) {
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("Alice", 30, 50000));
        employees.add(new Employee("Bob", 25, 60000));
        employees.add(new Employee("Charlie", 28, 55000));

        employees.sort((e1, e2) -> e1.name.compareTo(e2.name));
        System.out.println("Employees sorted by Name: " + employees);

        employees.sort((e1, e2) -> Integer.compare(e1.age, e2.age));
        System.out.println("Employees sorted by Age: " + employees);

        employees.sort((e1, e2) -> Double.compare(e2.salary, e1.salary));
        System.out.println("Employees sorted by Salary Desc: " + employees);

        List<Student> students = Arrays.asList(
            new Student("Alice", 82),
            new Student("Bob", 70),
            new Student("Charlie", 90),
            new Student("David", 60)
        );

        System.out.println("Students scoring above 75 (sorted by marks):");
        students.stream()
                .filter(s -> s.marks > 75)
                .sorted(Comparator.comparingDouble(s -> s.marks))
                .map(s -> s.name)
                .forEach(System.out::println);

        List<Product> products = Arrays.asList(
            new Product("Laptop", 1200, "Electronics"),
            new Product("Phone", 800, "Electronics"),
            new Product("Shirt", 40, "Clothing"),
            new Product("Jeans", 60, "Clothing"),
            new Product("Blender", 150, "Home Appliances")
        );

        Map<String, List<Product>> grouped = products.stream()
            .collect(Collectors.groupingBy(p -> p.category));
        System.out.println("Products grouped by category: " + grouped);

        Map<String, Optional<Product>> maxProduct = products.stream()
            .collect(Collectors.groupingBy(
                p -> p.category,
                Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
            ));
        System.out.println("Most expensive product in each category: " + maxProduct);

        double avgPrice = products.stream()
            .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("Average price of all products: $" + avgPrice);
    }
}

